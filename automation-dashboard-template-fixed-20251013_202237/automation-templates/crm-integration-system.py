#!/usr/bin/env python3
"""
CRM Integration System
======================

This system integrates your automation tools with popular CRMs like HubSpot, Airtable, and Notion.
It allows clients to track leads, campaigns, and results in their preferred CRM.

Author: The AutomatePro
Version: 1.0
"""

import requests
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Optional
import sqlite3

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CRMIntegrationSystem:
    def __init__(self):
        self.hubspot_api_key = None
        self.airtable_api_key = None
        self.airtable_base_id = None
        self.notion_token = None
        self.notion_database_id = None
        
    def setup_hubspot(self, api_key: str):
        """Setup HubSpot integration"""
        self.hubspot_api_key = api_key
        logger.info("HubSpot integration configured")
    
    def setup_airtable(self, api_key: str, base_id: str):
        """Setup Airtable integration"""
        self.airtable_api_key = api_key
        self.airtable_base_id = base_id
        logger.info("Airtable integration configured")
    
    def setup_notion(self, token: str, database_id: str):
        """Setup Notion integration"""
        self.notion_token = token
        self.notion_database_id = database_id
        logger.info("Notion integration configured")
    
    def sync_leads_to_hubspot(self, leads: List[Dict]):
        """Sync leads to HubSpot"""
        if not self.hubspot_api_key:
            logger.error("HubSpot API key not configured")
            return False
        
        logger.info(f"Syncing {len(leads)} leads to HubSpot")
        
        for lead in leads:
            try:
                # Create contact in HubSpot
                contact_data = {
                    "properties": {
                        "email": lead.get('email', ''),
                        "firstname": lead.get('first_name', ''),
                        "lastname": lead.get('last_name', ''),
                        "company": lead.get('company', ''),
                        "jobtitle": lead.get('title', ''),
                        "city": lead.get('location', ''),
                        "hs_lead_status": "NEW",
                        "lifecyclestage": "lead",
                        "lead_source": "Automation Tool",
                        "notes_last_contacted": f"Generated by The AutomatePro on {lead.get('date_found', '')}"
                    }
                }
                
                response = requests.post(
                    f"https://api.hubapi.com/contacts/v1/contact/",
                    headers={
                        "Authorization": f"Bearer {self.hubspot_api_key}",
                        "Content-Type": "application/json"
                    },
                    json=contact_data
                )
                
                if response.status_code == 201:
                    logger.info(f"Created HubSpot contact: {lead.get('email')}")
                else:
                    logger.warning(f"Failed to create HubSpot contact: {response.text}")
                
                time.sleep(0.1)  # Rate limiting
                
            except Exception as e:
                logger.error(f"Error syncing lead to HubSpot: {e}")
        
        logger.info("HubSpot sync completed")
        return True
    
    def sync_leads_to_airtable(self, leads: List[Dict]):
        """Sync leads to Airtable"""
        if not self.airtable_api_key or not self.airtable_base_id:
            logger.error("Airtable API key or base ID not configured")
            return False
        
        logger.info(f"Syncing {len(leads)} leads to Airtable")
        
        # Prepare records for Airtable
        records = []
        for lead in leads:
            record = {
                "fields": {
                    "Name": f"{lead.get('first_name', '')} {lead.get('last_name', '')}".strip(),
                    "Email": lead.get('email', ''),
                    "Company": lead.get('company', ''),
                    "Title": lead.get('title', ''),
                    "Location": lead.get('location', ''),
                    "Source": lead.get('source', ''),
                    "Status": "New",
                    "Date Found": lead.get('date_found', ''),
                    "Service Interest": lead.get('service_interest', ''),
                    "Notes": f"Generated by The AutomatePro automation tools"
                }
            }
            records.append(record)
        
        try:
            # Create records in Airtable
            response = requests.post(
                f"https://api.airtable.com/v0/{self.airtable_base_id}/Leads",
                headers={
                    "Authorization": f"Bearer {self.airtable_api_key}",
                    "Content-Type": "application/json"
                },
                json={"records": records}
            )
            
            if response.status_code == 200:
                logger.info(f"Created {len(records)} records in Airtable")
            else:
                logger.warning(f"Failed to create Airtable records: {response.text}")
            
        except Exception as e:
            logger.error(f"Error syncing leads to Airtable: {e}")
        
        return True
    
    def sync_leads_to_notion(self, leads: List[Dict]):
        """Sync leads to Notion"""
        if not self.notion_token or not self.notion_database_id:
            logger.error("Notion token or database ID not configured")
            return False
        
        logger.info(f"Syncing {len(leads)} leads to Notion")
        
        for lead in leads:
            try:
                # Create page in Notion
                page_data = {
                    "parent": {"database_id": self.notion_database_id},
                    "properties": {
                        "Name": {
                            "title": [
                                {
                                    "text": {
                                        "content": f"{lead.get('first_name', '')} {lead.get('last_name', '')}".strip()
                                    }
                                }
                            ]
                        },
                        "Email": {
                            "email": lead.get('email', '')
                        },
                        "Company": {
                            "rich_text": [
                                {
                                    "text": {
                                        "content": lead.get('company', '')
                                    }
                                }
                            ]
                        },
                        "Title": {
                            "rich_text": [
                                {
                                    "text": {
                                        "content": lead.get('title', '')
                                    }
                                }
                            ]
                        },
                        "Location": {
                            "rich_text": [
                                {
                                    "text": {
                                        "content": lead.get('location', '')
                                    }
                                }
                            ]
                        },
                        "Status": {
                            "select": {
                                "name": "New"
                            }
                        },
                        "Source": {
                            "rich_text": [
                                {
                                    "text": {
                                        "content": lead.get('source', '')
                                    }
                                }
                            ]
                        },
                        "Date Found": {
                            "date": {
                                "start": lead.get('date_found', '')
                            }
                        }
                    }
                }
                
                response = requests.post(
                    "https://api.notion.com/v1/pages",
                    headers={
                        "Authorization": f"Bearer {self.notion_token}",
                        "Content-Type": "application/json",
                        "Notion-Version": "2022-06-28"
                    },
                    json=page_data
                )
                
                if response.status_code == 200:
                    logger.info(f"Created Notion page: {lead.get('email')}")
                else:
                    logger.warning(f"Failed to create Notion page: {response.text}")
                
                time.sleep(0.1)  # Rate limiting
                
            except Exception as e:
                logger.error(f"Error syncing lead to Notion: {e}")
        
        logger.info("Notion sync completed")
        return True
    
    def create_client_dashboard(self, client_id: str):
        """Create a client dashboard for tracking results"""
        logger.info(f"Creating client dashboard for {client_id}")
        
        # Create SQLite database for client
        db_name = f"client_{client_id}_dashboard.db"
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        
        # Create tables
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS leads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                email TEXT,
                company TEXT,
                title TEXT,
                location TEXT,
                source TEXT,
                status TEXT,
                date_found TEXT,
                service_interest TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS campaigns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                campaign_id TEXT UNIQUE,
                name TEXT,
                type TEXT,
                status TEXT,
                leads_generated INTEGER,
                emails_sent INTEGER,
                opens INTEGER,
                clicks INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scraped_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_name TEXT,
                url TEXT,
                records_count INTEGER,
                data_type TEXT,
                status TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        
        logger.info(f"Client dashboard created: {db_name}")
        return db_name
    
    def generate_client_report(self, client_id: str, start_date: str, end_date: str):
        """Generate a client report"""
        logger.info(f"Generating report for client {client_id}")
        
        db_name = f"client_{client_id}_dashboard.db"
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        
        # Get leads data
        cursor.execute('''
            SELECT COUNT(*) as total_leads,
                   COUNT(CASE WHEN status = 'contacted' THEN 1 END) as contacted_leads,
                   COUNT(CASE WHEN status = 'converted' THEN 1 END) as converted_leads
            FROM leads 
            WHERE date_found BETWEEN ? AND ?
        ''', (start_date, end_date))
        
        leads_data = cursor.fetchone()
        
        # Get campaigns data
        cursor.execute('''
            SELECT COUNT(*) as total_campaigns,
                   SUM(leads_generated) as total_leads_generated,
                   SUM(emails_sent) as total_emails_sent,
                   SUM(opens) as total_opens,
                   SUM(clicks) as total_clicks
            FROM campaigns 
            WHERE created_at BETWEEN ? AND ?
        ''', (start_date, end_date))
        
        campaigns_data = cursor.fetchone()
        
        # Get scraped data
        cursor.execute('''
            SELECT COUNT(*) as total_projects,
                   SUM(records_count) as total_records_scraped
            FROM scraped_data 
            WHERE created_at BETWEEN ? AND ?
        ''', (start_date, end_date))
        
        scraped_data = cursor.fetchone()
        
        conn.close()
        
        # Generate report
        report = {
            "client_id": client_id,
            "period": f"{start_date} to {end_date}",
            "generated_at": datetime.now().isoformat(),
            "leads": {
                "total_leads": leads_data[0] or 0,
                "contacted_leads": leads_data[1] or 0,
                "converted_leads": leads_data[2] or 0,
                "conversion_rate": round((leads_data[2] or 0) / max(leads_data[0] or 1, 1) * 100, 2)
            },
            "campaigns": {
                "total_campaigns": campaigns_data[0] or 0,
                "leads_generated": campaigns_data[1] or 0,
                "emails_sent": campaigns_data[2] or 0,
                "open_rate": round((campaigns_data[3] or 0) / max(campaigns_data[2] or 1, 1) * 100, 2),
                "click_rate": round((campaigns_data[4] or 0) / max(campaigns_data[2] or 1, 1) * 100, 2)
            },
            "scraping": {
                "total_projects": scraped_data[0] or 0,
                "records_scraped": scraped_data[1] or 0
            }
        }
        
        # Save report
        report_filename = f"client_{client_id}_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w') as f:
            json.dump(report, f, indent=2)
        
        logger.info(f"Client report generated: {report_filename}")
        return report, report_filename

def main():
    """Main function to demonstrate CRM integration"""
    logger.info("🚀 Starting CRM Integration System")
    
    # Initialize system
    crm = CRMIntegrationSystem()
    
    # Setup integrations (you would get these from client)
    # crm.setup_hubspot("your_hubspot_api_key")
    # crm.setup_airtable("your_airtable_api_key", "your_base_id")
    # crm.setup_notion("your_notion_token", "your_database_id")
    
    # Sample leads data
    sample_leads = [
        {
            "first_name": "John",
            "last_name": "Smith",
            "email": "john@example.com",
            "company": "Tech Corp",
            "title": "CEO",
            "location": "New York",
            "source": "LinkedIn",
            "date_found": "2025-01-27",
            "service_interest": "Full Suite"
        },
        {
            "first_name": "Sarah",
            "last_name": "Johnson",
            "email": "sarah@example.com",
            "company": "Marketing Inc",
            "title": "Marketing Director",
            "location": "California",
            "source": "LinkedIn",
            "date_found": "2025-01-27",
            "service_interest": "Email Marketing"
        }
    ]
    
    # Create client dashboard
    client_id = "demo_client_001"
    dashboard_db = crm.create_client_dashboard(client_id)
    
    # Generate client report
    report, report_file = crm.generate_client_report(
        client_id, 
        "2025-01-01", 
        "2025-01-31"
    )
    
    logger.info("🎉 CRM Integration System Demo Complete!")
    logger.info(f"Dashboard created: {dashboard_db}")
    logger.info(f"Report generated: {report_file}")

if __name__ == "__main__":
    main()
